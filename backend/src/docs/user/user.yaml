openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: >
    Endpoints de gestión de usuarios, perfiles y administración (requiere autenticación con JWT).

tags:
  - name: User
    description: Endpoints para la gestión del perfil de usuario
  - name: Admin
    description: Endpoints administrativos para gestión de usuarios

paths:
  /api/user/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Perfil del usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Token inválido o expirado

    patch:
      summary: Actualizar perfil del usuario autenticado
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPayload"
      responses:
        "200":
          description: Perfil actualizado correctamente
        "400":
          description: Contraseña actual requerida o formato inválido

    delete:
      summary: Eliminar cuenta del usuario autenticado (soft delete)
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Usuario eliminado correctamente
        "401":
          description: No autorizado

  /api/user/profile/{userId}:
    get:
      summary: Obtener perfil de un usuario (solo admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Perfil obtenido correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "403":
          description: No autorizado
        "404":
          description: Usuario no encontrado

    delete:
      summary: Eliminar un usuario (solo admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Usuario eliminado correctamente
        "403":
          description: No autorizado
        "404":
          description: Usuario no encontrado

  /api/user/users:
    get:
      summary: Listar todos los usuarios (solo admin)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          schema:
            type: integer
            example: 10
        - name: role
          in: query
          schema:
            type: string
            enum: [ADMIN, VENDEDOR, COMPRADOR]
        - name: search
          in: query
          schema:
            type: string
            example: "juan"
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Lista paginada de usuarios
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
        "403":
          description: No autorizado

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          example: "usuario@correo.com"
        firstName:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        phone:
          type: string
          example: "+5493794555555"
        role:
          type: string
          enum: [ADMIN, VENDEDOR, COMPRADOR]
        isEmailVerified:
          type: boolean
        profileImage:
          type: string
          nullable: true
          example: "https://cdn.miapp.com/profile.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateUserPayload:
      type: object
      properties:
        firstName:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        phone:
          type: string
          example: "+5493794555555"
        profileImage:
          type: string
          example: "https://cdn.miapp.com/newphoto.jpg"
        email:
          type: string
          example: "nuevo@correo.com"
        newPassword:
          type: string
          example: "NewPassword123"
        currentPassword:
          type: string
          example: "OldPassword123"

    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserProfile"
        total:
          type: integer
          example: 58
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 6
